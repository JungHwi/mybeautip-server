buildscript {
  ext {
    kotlinVersion = '1.7.21'
    springVersion = '2.7.5'
    springCloudVersion = '2.2.6.RELEASE'
    springOauth2Version = '2.5.2.RELEASE'
    springJwtVersion = '1.1.1.RELEASE'
    awsSdkVersion = '1.10.73'
    jacksonDataFormatVersion = '2.13.4'
    log4jVersion = '2.19.0'
    queryDslVersion = '8.1.0'
    snippetsDir = file('build/generated-snippets')
  }
  repositories {
    mavenCentral()
    maven {
      url 'https://repo.spring.io/libs-release'
    }
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springVersion}")
    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
    classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
  }
}

plugins {
  id 'org.springframework.boot' version '2.7.5'
  id "org.asciidoctor.jvm.convert" version "3.3.2"
}

configurations {
  all {
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
  }
  asciidoctorExtensions
}

apply plugin: 'java'
apply plugin: "java-library"
apply plugin: "kotlin"
apply plugin: "org.jetbrains.kotlin.jvm"
apply plugin: "org.jetbrains.kotlin.kapt"
apply plugin: "org.jetbrains.kotlin.plugin.spring"
apply plugin: 'kotlin-jpa'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: "org.springframework.boot"
apply plugin: 'io.spring.dependency-management'
apply plugin: 'project-report'


sourceCompatibility = 17
targetCompatibility = 17

compileKotlin {
  kotlinOptions {
    freeCompilerArgs = ["-Xjsr305=strict"]
    jvmTarget = "17"
  }
}
compileTestKotlin {
  kotlinOptions {
    freeCompilerArgs = ["-Xjsr305=strict"]
    jvmTarget = "17"
  }
}

kapt {
  keepJavacAnnotationProcessors = true
}

allOpen {
  annotation("javax.persistence.Entity")
  annotation("javax.persistence.MappedSuperclass")
  annotation("javax.persistence.Embeddable")
}

springBoot {
  buildInfo {
    properties {
      version = '1.0.0'
      name = 'myBeautip Server Application'
      group = 'com.jocoos.mybeautip'
    }
  }
}

repositories {
  mavenCentral()
}

dependencies {
  implementation("org.springframework.cloud:spring-cloud-starter-openfeign:3.1.5")
  implementation("org.springframework.boot:spring-boot-starter-actuator:${springVersion}")
  implementation("org.springframework.boot:spring-boot-starter-web:${springVersion}")
  implementation("org.springframework.boot:spring-boot-starter-log4j2:${springVersion}")
  implementation("org.springframework.boot:spring-boot-starter-validation:${springVersion}")
  implementation("org.springframework.boot:spring-boot-starter-hateoas:${springVersion}")
  implementation("org.apache.logging.log4j:log4j-api:${log4jVersion}")
  implementation("org.apache.logging.log4j:log4j-core:${log4jVersion}")
  implementation("org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}")
  implementation("org.openapitools:jackson-databind-nullable:0.2.4")
  implementation("com.github.f4b6a3:ulid-creator:5.1.0")

  implementation("org.springframework.boot:spring-boot-starter-data-jpa:${springVersion}")
  implementation("com.infobip:infobip-spring-data-jpa-querydsl-boot-starter:7.2.0")
  implementation("org.openapitools:jackson-databind-nullable:0.2.4")

//  kapt "com.querydsl:querydsl-apt:4.2.1:hibernate"
//  runtimeOnly group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: '1.7.22'
  implementation "com.querydsl:querydsl-jpa:5.0.0"
  implementation "com.querydsl:querydsl-core:5.0.0"
  annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jpa"
  annotationProcessor 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final'
  annotationProcessor 'javax.annotation:javax.annotation-api:1.3.2'

  implementation("org.springframework.boot:spring-boot-starter-security:${springVersion}")
  implementation("org.springframework.boot:spring-boot-starter-cache:${springVersion}")
  implementation("org.springframework.boot:spring-boot-starter-aop:${springVersion}")
  implementation("org.springframework.boot:spring-boot-starter-mail:${springVersion}")
  implementation("org.springframework.security.oauth:spring-security-oauth2:${springOauth2Version}")
  implementation("org.springframework.security:spring-security-jwt:${springJwtVersion}")
  implementation("org.springframework.boot:spring-boot-devtools:${springVersion}")
  implementation("org.springframework.cloud:spring-cloud-aws-messaging:${springCloudVersion}")
  implementation("com.fasterxml.jackson.core:jackson-core:${jacksonDataFormatVersion}")
  implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonDataFormatVersion}")
  implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jacksonDataFormatVersion}")
  implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonDataFormatVersion}")
  implementation("org.projectlombok:lombok:1.18.24")
  annotationProcessor("org.projectlombok:lombok:1.18.24")
  testImplementation("org.projectlombok:lombok:1.18.24")
  testAnnotationProcessor("org.projectlombok:lombok:1.18.24")
  implementation("org.mapstruct:mapstruct:1.5.3.Final")
  annotationProcessor("org.mapstruct:mapstruct:1.5.3.Final")
  annotationProcessor("org.mapstruct:mapstruct-processor:1.5.3.Final")
  implementation('org.flywaydb:flyway-core:7.15.0')
  implementation('javax.xml.bind:jaxb-api')

  implementation('org.apache.commons:commons-exec:1.3')
  implementation('org.apache.commons:commons-lang3:3.12.0')
  implementation('org.apache.commons:commons-collections4:4.4')
  implementation 'org.apache.tika:tika-core:2.6.0'

  implementation('org.apache.httpcomponents:httpclient:4.5.13')
  implementation('org.json:json:20180813')
  implementation('mysql:mysql-connector-java')
  implementation('com.h2database:h2')
  implementation('com.amazonaws:aws-java-sdk-sts:1.11.375')
  implementation('org.jsoup:jsoup:1.11.2')
  implementation('redis.clients:jedis:4.2.1')
  implementation('io.jsonwebtoken:jjwt:0.9.0')

  implementation 'org.springframework.boot:spring-boot-starter-graphql'
  testImplementation 'org.springframework.graphql:spring-graphql-test'

  asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'

  testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

  testImplementation("io.rest-assured:rest-assured-all:4.5.1")
  testImplementation("io.rest-assured:kotlin-extensions:4.5.1")
  
  testImplementation "org.testcontainers:testcontainers:1.17.6"
  testImplementation "org.testcontainers:junit-jupiter:1.17.6"
  testImplementation "org.testcontainers:mysql:1.17.6"

  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.security:spring-security-test'
  testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'

  testImplementation("org.projectlombok:lombok:1.18.24")

  testAnnotationProcessor("org.projectlombok:lombok:1.18.24")
}

test {
//  minHeapSize = "128m"
//  maxHeapSize = "1024m"
//  jvmArgs "-XX:+UnlockExperimentalVMOptions"
  doFirst {
    systemProperty 'spring.profiles.active', System.getProperty("profile", "local")
  }
  useJUnitPlatform()
  outputs.dir snippetsDir
  testLogging {
    exceptionFormat "full"
  }
}

asciidoctor {
  mkdir snippetsDir
  configurations 'asciidoctorExtensions'
  inputs.dir snippetsDir
  dependsOn test

  sources{
    include("**/*.adoc","**/common/*.adoc")
  }

  baseDirFollowsSourceFile()
}

asciidoctor.doFirst {
  delete file('src/main/resources/static/docs')
}

task copyDocument(type: Copy) {
  dependsOn asciidoctor

  from 'build/docs/asciidoc'
  into 'src/main/resources/static/docs'
}

task copyDocumentForJar(type: Copy) {
  dependsOn asciidoctor

  from 'build/docs/asciidoc'
  into 'build/resources/main/static/docs'
}

build {
  dependsOn copyDocument
}

bootJar {
  dependsOn copyDocumentForJar
  archiveFileName.set("mybeautip-server.jar")
}

buildscript {
  ext {
    springVersion = '2.6.6'
    springCloudVersion = '2.2.6.RELEASE'
    springOauth2Version = '2.5.2.RELEASE'
    springJwtVersion = '1.0.9.RELEASE'
    swaggerVersion = '2.9.2'
    awsSdkVersion = '1.10.73'
    jacksonDataFormatVersion = '2.13.2'
    log4jVersion = '2.17.1'
    snippetsDir = file('build/generated-snippets')
  }
  repositories {
    mavenCentral()
    maven {
      url 'https://repo.spring.io/libs-release'
    }
  }
  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${springVersion}"
  }
}

plugins {
  id 'org.springframework.boot' version '2.6.6'
  id "org.asciidoctor.jvm.convert" version "3.3.2"
}

configurations {
  compile.exclude module: 'spring-boot-starter-logging'
  asciidoctorExtensions
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: "org.springframework.boot"
apply plugin: 'io.spring.dependency-management'
apply plugin: 'project-report'

compileJava {
  options.encoding = 'UTF-8'
  options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

springBoot {
  buildInfo {
    properties {
      version = '1.0.0'
      name = 'myBeautip Server Application'
      group = 'com.jocoos.mybeautip'
    }
  }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
}

dependencies {
  implementation("org.springframework.cloud:spring-cloud-starter-openfeign:3.1.1")
  implementation("org.springframework.boot:spring-boot-starter-actuator:${springVersion}")
  implementation("org.springframework.boot:spring-boot-starter-web:${springVersion}")
  implementation("org.springframework.boot:spring-boot-starter-log4j2:${springVersion}")
  implementation("org.springframework.boot:spring-boot-starter-validation:${springVersion}")
  implementation("org.apache.logging.log4j:log4j-api:${log4jVersion}")
  implementation("org.apache.logging.log4j:log4j-core:${log4jVersion}")
  implementation("org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}")
  implementation("org.springframework.boot:spring-boot-starter-data-rest:${springVersion}")
  implementation("org.springframework.boot:spring-boot-starter-data-jpa:${springVersion}")
  implementation("org.springframework.boot:spring-boot-starter-security:${springVersion}")
  implementation("org.springframework.boot:spring-boot-starter-aop:${springVersion}")
  implementation("org.springframework.boot:spring-boot-starter-mail:${springVersion}")
  implementation("org.springframework.security.oauth:spring-security-oauth2:${springOauth2Version}")
  implementation("org.springframework.security:spring-security-jwt:${springJwtVersion}")
  implementation("org.springframework.boot:spring-boot-devtools:${springVersion}")
  implementation("org.springframework.cloud:spring-cloud-aws-messaging:${springCloudVersion}")
  implementation("com.fasterxml.jackson.core:jackson-core:${jacksonDataFormatVersion}")
  implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonDataFormatVersion}")
  implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jacksonDataFormatVersion}")
  implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonDataFormatVersion}")
  implementation("org.mapstruct:mapstruct:1.4.2.Final")
  annotationProcessor "org.mapstruct:mapstruct:1.4.2.Final"
  annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
  implementation("org.projectlombok:lombok:1.18.10")
  annotationProcessor("org.projectlombok:lombok:1.18.10")
  implementation('org.flywaydb:flyway-core:7.15.0')
  implementation('javax.xml.bind:jaxb-api')

  implementation('org.apache.commons:commons-exec:1.3')
  implementation('org.apache.commons:commons-lang3:3.7')
  implementation('org.apache.commons:commons-collections4:4.2')
  implementation('org.apache.httpcomponents:httpclient:4.5.5')
  implementation('org.json:json:20180813')
  implementation('mysql:mysql-connector-java')
  implementation('com.h2database:h2')
  implementation('com.amazonaws:aws-java-sdk-sts:1.11.375')
  implementation('org.jsoup:jsoup:1.11.2')
  implementation('redis.clients:jedis:2.9.0')
  implementation('io.jsonwebtoken:jjwt:0.9.0')
  asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
  testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.security:spring-security-test'
  testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'
  testImplementation("org.projectlombok:lombok:1.18.10")
  testAnnotationProcessor("org.projectlombok:lombok:1.18.10")

}

test {
  outputs.dir snippetsDir
  useJUnitPlatform()
}

asciidoctor {
  dependsOn test
  mkdir snippetsDir
  configurations 'asciidoctorExtensions'
  inputs.dir snippetsDir

  sources{
    include("**/*.adoc","**/common/*.adoc")
  }

  baseDirFollowsSourceFile()
}

asciidoctor.doFirst {
  delete file('src/main/resources/static/docs')
}


task copyDocument(type: Copy) {
  dependsOn asciidoctor
  from file("build/docs/asciidoc")
  into file("src/main/resources/static/docs")
}

build {
  dependsOn copyDocument
}

bootJar {
  baseName = 'mybeautip-server'
  version = '1.1.1'
  dependsOn asciidoctor
  from ("${asciidoctor.outputDir}/html5") {
    into 'static/docs'
  }
}

eclipse {
  classpath {
    containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
    containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
  }
}
